version: "2.3"
services:
  simcore-paraviewweb:
    image: 3d-viewer-dev
    build:
      target: development
    environment:
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - SIMCORE_NODE_BASEPATH=${SIMCORE_NODE_BASEPATH}
      - SIMCORE_HOST_NAME=${SIMCORE_HOST_NAME}
      - TEST_DATA_PATH=/home/root/test-data
      - SERVER_PORT=${SERVER_PORT}
      - PARAVIEW_DEBUG=${PARAVIEW_DEBUG}
    depends_on:
      - postgres
      - minio
      - storage
    volumes:
      - ./simcoreparaviewweb/devel:/home/root/devel
      - ../../services:/home/root/services
      - ../../scripts/dy_services_helpers:/home/root/scripts/dy_services_helpers
      - ./test-data:/home/root/test-data
      - ./visualizer-data:/data
      - ./simcoreparaviewweb/docker:/home/root/docker
      - ./simcoreparaviewweb/config:/home/root/config
      - ./simcoreparaviewweb/handlers:/home/root/handlers
    labels:
      - traefik.enable=true
      - traefik.http.services.simcore-paraviewweb.loadbalancer.server.port=${SERVER_PORT}
      - traefik.http.routers.simcore-paraviewweb.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.simcore-paraviewweb.entrypoints=http
  #--------------------------------------------------------------------
  storage:
    image: itisfoundation/storage:latest
    init: true
    ports:
      - 11111:8080
    environment:
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_SECURE=${S3_SECURE}
      - BF_API_SECRET=none
      - BF_API_KEY=none
      - STORAGE_LOGLEVEL=INFO
      - STORAGE_MONITORING_ENABLED=1
      - TRACING_ENABLED=${TRACING_ENABLED:-True}
      - TRACING_ZIPKIN_ENDPOINT=${TRACING_ZIPKIN_ENDPOINT}

    restart: always
    depends_on:
      - postgres
  #--------------------------------------------------------------------
  postgres:
    image: postgres:10
    init: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
  #--------------------------------------------------------------------
  adminer:
    image: adminer
    init: true
    ports:
      - 18080:8080
    depends_on:
      - postgres
  #--------------------------------------------------------------------
  minio:
    image: minio/minio
    init: true
    environment:
      - MINIO_ACCESS_KEY=${S3_ACCESS_KEY}
      - MINIO_SECRET_KEY=${S3_SECRET_KEY}
    ports:
      - "9001:9000"
    command: server /data
  #--------------------------------------------------------------------
  traefik:
    image: traefik:v2.1
    init: true
    ports:
      - "80:80"
      - "8080:8080"
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.traefik_dashboard.address=:8080"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.swarmMode=false"
      - "--providers.docker.exposedByDefault=false"

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

    labels:
      - traefik.enable=true
      # gzip compression
      - traefik.http.middlewares.gzip.compress=true
      # ssl header necessary so that socket.io upgrades correctly from polling to websocket mode. the middleware must be attached to the right connection.
      # - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=http
      # traefik UI
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.rule=PathPrefix(`/dashboard`) || PathPrefix(`/api`)
      - traefik.http.routers.api.entrypoints=traefik_dashboard
      - traefik.http.routers.api.middlewares=gzip@docker
      - traefik.http.services.api.loadbalancer.server.port=8080
