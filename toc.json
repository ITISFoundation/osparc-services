{
  "ans-model-viewer": {
    "description": "ANS model viewer",
    "dockerfile": "dy-dash/ans-model-viewer/docker/python/Dockerfile",
    "image": "simcore/services/dynamic/ans-model-viewer:1.0.0",
    "key": "simcore/services/dynamic/ans-model-viewer",
    "name": "ANS model viewer",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "Resources",
        "type": "Resources",
        "value": {
          "Limits": {
            "MemoryBytes": 2147483648,
            "NanoCPUs": 1000000000
          }
        }
      }
    ],
    "type": "dynamic",
    "version": "1.0.0"
  },
  "cardiac_myocyte_grandi": {
    "description": "This is the mouse cardiac myocyte electrophysiology model from Eleonora Grandi at UC Davis.",
    "dockerfile": "ma-myocyteele/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/comp/cardiac_myocyte_grandi",
    "name": "cardiac_myocyte_grandi",
    "type": "computational",
    "version": "1.0.1"
  },
  "cc-rabbit-0d": {
    "description": "Graph viewer for data generated by Rabbit SS and Human GB 0D cardiac models",
    "dockerfile": "dy-dash/cc-rabbit-0d/src/Dockerfile",
    "image": "${DOCKER_REGISTRY}/cc-0d-viewer:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/cc-0d-viewer",
    "name": "0D cardiac model viewer",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "3.0.4"
  },
  "cc-rabbit-1d": {
    "description": "Graph viewer for data generated by Rabbit SS and Human GB 1D cardiac models",
    "dockerfile": "dy-dash/cc-rabbit-1d/src/Dockerfile",
    "image": "${DOCKER_REGISTRY}/cc-1d-viewer:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/cc-1d-viewer",
    "name": "1D cardiac model viewer",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "3.0.4"
  },
  "cc-rabbit-2d": {
    "description": "Graph viewer for data generated by Rabbit SS and Human GB 2D cardiac models",
    "dockerfile": "dy-dash/cc-rabbit-2d/src/Dockerfile",
    "image": "${DOCKER_REGISTRY}/cc-2d-viewer:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/cc-2d-viewer",
    "name": "2D cardiac model viewer",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "3.0.5"
  },
  "csv-table": {
    "description": "CSV Table viewer powered by [csv-to-html-table](https://github.com/derekeder/csv-to-html-table)",
    "dockerfile": "dy-csv-table/Dockerfile",
    "image": "${DOCKER_REGISTRY}/csv-table:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/csv-table",
    "name": "CSV Table viewer",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 4000000000,
          "mem_limit": 17179869184
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 4000
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "1.0.0"
  },
  "dy-static-file-server": {
    "description": "Legacy test dynamic service (starts using original director-v0). The /workdir/generated-data directory is populated if no content is present.",
    "dockerfile": "dy-static-file-server/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/dy-static-file-server",
    "name": "dy-static-file-server",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 10000000,
          "mem_limit": 268435456
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 8080
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "2.0.4"
  },
  "dy-static-file-server-dynamic-sidecar": {
    "description": "Modern test dynamic service (with dynamic sidecar). Changes to the inputs will be forwarded to the outputs. The /workdir/generated-data directory is populated if no content is present.",
    "dockerfile": "dy-static-file-server/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}-dynamic-sidecar:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/dy-static-file-server-dynamic-sidecar",
    "name": "dy-static-file-server-dynamic-sidecar",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 10000000,
          "mem_limit": 268435456
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 8080
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "2.0.4"
  },
  "dy-static-file-server-dynamic-sidecar-compose-spec": {
    "description": "Modern test dynamic service providing a docker-compose specification file (with dynamic sidecar and compose-spec). Changes to the inputs will be forwarded to the outputs. The /workdir/generated-data directory is populated if no content is present.",
    "dockerfile": "dy-static-file-server/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}-dynamic-sidecar-compose-spec:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/dy-static-file-server-dynamic-sidecar-compose-spec",
    "name": "dy-static-file-server-dynamic-sidecar-compose-spec",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 10000000,
          "mem_limit": 268435456
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 8080
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "2.0.4"
  },
  "jupyter-base-notebook": {
    "description": "Jupyter notebook",
    "dockerfile": "dy-jupyter/Dockerfile",
    "image": "${DOCKER_REGISTRY}/jupyter-base-notebook:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/jupyter-base-notebook",
    "name": "jupyter-base-notebook",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "resources",
        "type": "resources",
        "value": {
          "Limits": {
            "MemoryBytes": 8589934592,
            "NanoCPUs": 4000000000
          }
        }
      }
    ],
    "type": "dynamic",
    "version": "2.14.0"
  },
  "jupyter-neuron": {
    "description": "Jupyter notebook with preinstalled neuron modules",
    "dockerfile": "dy-jupyter-extensions/neuron/Dockerfile",
    "image": "${DOCKER_REGISTRY}/jupyter-neuron:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/jupyter-neuron",
    "name": "jupyter-neuron",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "resources",
        "type": "resources",
        "value": {
          "Limits": {
            "MemoryBytes": 8388608,
            "NanoCPUs": 4000000000
          }
        }
      }
    ],
    "type": "dynamic",
    "version": "1.1.0"
  },
  "jupyter-r-notebook": {
    "description": "Jupyter R notebook",
    "dockerfile": "dy-jupyter/Dockerfile",
    "image": "${DOCKER_REGISTRY}/jupyter-r-notebook:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/jupyter-r-notebook",
    "name": "jupyter-r-notebook",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "resources",
        "type": "resources",
        "value": {
          "Limits": {
            "MemoryBytes": 8589934592,
            "NanoCPUs": 4000000000
          }
        }
      }
    ],
    "type": "dynamic",
    "version": "2.14.0"
  },
  "jupyter-scipy-notebook": {
    "description": "Jupyter scipy notebook",
    "dockerfile": "dy-jupyter/Dockerfile",
    "image": "${DOCKER_REGISTRY}/jupyter-scipy-notebook:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/jupyter-scipy-notebook",
    "name": "jupyter-scipy-notebook",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "resources",
        "type": "resources",
        "value": {
          "Limits": {
            "MemoryBytes": 8589934592,
            "NanoCPUs": 4000000000
          }
        }
      }
    ],
    "type": "dynamic",
    "version": "2.14.0"
  },
  "kember": {
    "description": "Graph viewer for data generated by kember solver",
    "dockerfile": "dy-2Dgraph/use-cases/kember/Dockerfile",
    "image": "${DOCKER_REGISTRY}/kember-viewer:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/kember-viewer",
    "name": "kember-viewer",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "2.14.0"
  },
  "mapcore-widget": {
    "description": "Interactive maps reveal the anatomy and functional relationships of the autonomic nerves and the organs that they innervate. 2D and 3D maps render spatial dynamics, connectivity, and physiology across a range of species and nerve-organ systems.",
    "dockerfile": "dy-mapcore-widget/Dockerfile",
    "image": "${DOCKER_REGISTRY}/mapcore-widget:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/mapcore-widget",
    "name": "Mapcore Flatmap",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 4000000000,
          "mem_limit": 17179869184
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 4000
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "0.1.24"
  },
  "mattward-dash": {
    "description": "Graph viewer for data generated by mattward solver",
    "dockerfile": "dy-dash/mattward-dash/src/Dockerfile",
    "image": "${DOCKER_REGISTRY}/mattward-viewer:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/mattward-viewer",
    "name": "mattward-viewer",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 8888
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "3.0.5"
  },
  "opencor": {
    "description": "OpenCOR is a cross-platform modelling environment, which can be used to organise, edit, simulate and analyse CellML and SED-ML files.",
    "dockerfile": "oc-opencor-base/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/comp/opencor",
    "name": "OpenCOR",
    "type": "computational",
    "version": "1.0.4"
  },
  "opencorservice_demo": {
    "description": "opencorservice_demo",
    "dockerfile": "oc-guytonmodel/docker/ubuntu/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/comp/opencorservice_demo",
    "name": "opencorservice_demo",
    "type": "computational",
    "version": "1.0.1"
  },
  "pmr_mrg": {
    "description": "Creates a simulation of the MRG fiber based on the model found on the PMR https://models.physiomeproject.org/e/5f7/mcintyre_richardson_grill_model_2001.cellml/view",
    "dockerfile": "oc-pmrmrg/docker/ubuntu/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/comp/pmr_mrg",
    "name": "pmr_mrg",
    "type": "computational",
    "version": "1.0.2"
  },
  "raw-graphs": {
    "description": "2D plots powered by RAW Graphs",
    "dockerfile": "dy-raw-graphs/Dockerfile",
    "image": "${DOCKER_REGISTRY}/raw-graphs:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/raw-graphs",
    "name": "2D plot",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 4000000000,
          "mem_limit": 17179869184
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 4000
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "2.11.1"
  },
  "raw-graphs-table": {
    "description": "Table view powered by RAW Graphs",
    "dockerfile": "dy-raw-graphs/Dockerfile",
    "image": "${DOCKER_REGISTRY}/raw-graphs-table:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/raw-graphs-table",
    "name": "Table view",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 4000000000,
          "mem_limit": 17179869184
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 4000
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "2.11.1"
  },
  "server": {
    "description": "Modeler viewer",
    "dockerfile": "dy-modeling/server/Dockerfile",
    "image": "${DOCKER_REGISTRY}/modeler-webserver:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/modeler-webserver",
    "name": "modeler",
    "simcore.service.settings": [
      {
        "name": "ports",
        "type": "int",
        "value": 9090
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "env",
        "type": "string",
        "value": [
          "CS_S4L_HOSTNAME=modeler_xrpc-worker_%service_uuid%"
        ]
      }
    ],
    "type": "dynamic",
    "version": "0.1.1"
  },
  "sleeper": {
    "description": "A service which awaits for time to pass, two times.",
    "dockerfile": "sleeper/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/comp/itis/sleeper",
    "name": "sleeper",
    "simcore.service.settings": [
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "resources",
        "type": "resources",
        "value": {
          "Limits": {
            "MemoryBytes": 134217728,
            "NanoCPUs": 100000000
          }
        }
      }
    ],
    "type": "computational",
    "version": "2.1.4"
  },
  "sleeper-gpu": {
    "description": "A service which awaits for time to pass.",
    "dockerfile": "sleeper/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}-gpu:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/comp/itis/sleeper-gpu",
    "name": "sleeper-gpu",
    "simcore.service.settings": [
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "Resources",
        "type": "Resources",
        "value": {
          "Limits": {
            "MemoryBytes": 134217728,
            "NanoCPUs": 100000000
          },
          "Reservations": {
            "GenericResources": [
              {
                "DiscreteResourceSpec": {
                  "Kind": "VRAM",
                  "Value": 1
                }
              }
            ]
          }
        }
      }
    ],
    "type": "computational",
    "version": "2.1.4"
  },
  "sleeper-mpi": {
    "description": "A service which awaits for time to pass.",
    "dockerfile": "sleeper/docker/custom/Dockerfile",
    "image": "${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}-mpi:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/comp/itis/sleeper-mpi",
    "name": "sleeper-mpi",
    "simcore.service.settings": [
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      },
      {
        "name": "Resources",
        "type": "Resources",
        "value": {
          "Limits": {
            "MemoryBytes": 134217728,
            "NanoCPUs": 100000000
          },
          "Reservations": {
            "GenericResources": [
              {
                "DiscreteResourceSpec": {
                  "Kind": "MPI",
                  "Value": 1
                }
              }
            ]
          }
        }
      }
    ],
    "type": "computational",
    "version": "2.1.4"
  },
  "tissue-properties": {
    "description": "Tissue properties compiled in an extensive, critical literature review by the ITIS Foundation. Visit [itis.swiss/database](https://itis.swiss/database) for additional information, e.g., on tissue parameter variability/uncertainty, quality assurance, and the explored sources. Please use the following citation when referring to the database: Hasgall PA, Di Gennaro F, Baumgartner C, Neufeld E, Lloyd B, Gosselin MC, Payne D, Klingenb\u00f6ck A, Kuster N, ITIS Database for thermal and electromagnetic parameters of biological tissues, Version 4.0, May 15, 2018, DOI: 10.13099/VIP21000-04-0. [itis.swiss/database](https://itis.swiss/database). Powered by [csv-to-html-table](https://github.com/derekeder/csv-to-html-table)",
    "dockerfile": "dy-tissue-properties/Dockerfile",
    "image": "${DOCKER_REGISTRY}/tissue-properties:${DOCKER_IMAGE_TAG}",
    "key": "simcore/services/dynamic/tissue-properties",
    "name": "Tissue properties",
    "simcore.service.settings": [
      {
        "name": "resources",
        "type": "Resources",
        "value": {
          "cpu_limit": 4000000000,
          "mem_limit": 17179869184
        }
      },
      {
        "name": "ports",
        "type": "int",
        "value": 4000
      },
      {
        "name": "constraints",
        "type": "string",
        "value": [
          "node.platform.os == linux"
        ]
      }
    ],
    "type": "dynamic",
    "version": "1.0.1"
  }
}